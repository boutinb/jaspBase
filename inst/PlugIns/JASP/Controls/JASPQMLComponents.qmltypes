import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "analysisform.h"
        name: "AnalysisForm"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["JASP.Controls/AnalysisForm 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "title"
            type: "QString"
            read: "title"
            write: "setTitle"
            notify: "titleChanged"
            index: 0
        }
        Property {
            name: "errors"
            type: "QString"
            read: "errors"
            notify: "errorsChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "warnings"
            type: "QString"
            read: "warnings"
            notify: "warningsChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "needsRefresh"
            type: "bool"
            read: "needsRefresh"
            notify: "needsRefreshChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "hasVolatileNotes"
            type: "bool"
            read: "hasVolatileNotes"
            notify: "hasVolatileNotesChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "runOnChange"
            type: "bool"
            read: "runOnChange"
            write: "setRunOnChange"
            notify: "runOnChangeChanged"
            index: 5
        }
        Property {
            name: "info"
            type: "QString"
            read: "info"
            write: "setInfo"
            notify: "infoChanged"
            index: 6
        }
        Property {
            name: "helpMD"
            type: "QString"
            read: "helpMD"
            notify: "helpMDChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "analysis"
            type: "QVariant"
            read: "analysis"
            notify: "analysisInitialized"
            index: 8
            isReadonly: true
        }
        Property {
            name: "optionNameConversion"
            type: "QVariantList"
            read: "optionNameConversion"
            write: "setOptionNameConversion"
            notify: "optionNameConversionChanged"
            index: 9
        }
        Property {
            name: "showRButton"
            type: "bool"
            read: "showRButton"
            notify: "showRButtonChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "developerMode"
            type: "bool"
            read: "developerMode"
            notify: "developerModeChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "rSyntaxText"
            type: "QString"
            read: "rSyntaxText"
            notify: "rSyntaxTextChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "showAllROptions"
            type: "bool"
            read: "showAllROptions"
            write: "setShowAllROptions"
            notify: "showAllROptionsChanged"
            index: 13
        }
        Property { name: "rSyntaxControlName"; type: "QString"; index: 14 }
        Property {
            name: "activeJASPControl"
            type: "JASPControl"
            isPointer: true
            read: "getActiveJASPControl"
            notify: "activeJASPControlChanged"
            index: 15
            isReadonly: true
        }
        Signal {
            name: "formChanged"
            Parameter { name: "analysis"; type: "AnalysisBase"; isPointer: true }
        }
        Signal { name: "formCompletedSignal" }
        Signal { name: "refreshTableViewModels" }
        Signal { name: "errorMessagesItemChanged" }
        Signal { name: "languageChanged" }
        Signal { name: "needsRefreshChanged" }
        Signal { name: "hasVolatileNotesChanged" }
        Signal { name: "runOnChangeChanged" }
        Signal { name: "infoChanged" }
        Signal { name: "helpMDChanged" }
        Signal { name: "errorsChanged" }
        Signal { name: "warningsChanged" }
        Signal { name: "analysisInitialized" }
        Signal {
            name: "rSourceChanged"
            Parameter { name: "name"; type: "QString" }
        }
        Signal { name: "optionNameConversionChanged" }
        Signal { name: "titleChanged" }
        Signal { name: "showRButtonChanged" }
        Signal { name: "developerModeChanged" }
        Signal { name: "rSyntaxTextChanged" }
        Signal { name: "showAllROptionsChanged" }
        Signal { name: "activeJASPControlChanged" }
        Method {
            name: "runScriptRequestDone"
            Parameter { name: "result"; type: "QString" }
            Parameter { name: "requestId"; type: "QString" }
            Parameter { name: "hasError"; type: "bool" }
        }
        Method {
            name: "setInfo"
            Parameter { name: "info"; type: "QString" }
        }
        Method {
            name: "setAnalysis"
            Parameter { name: "analysis"; type: "AnalysisBase"; isPointer: true }
        }
        Method {
            name: "boundValueChangedHandler"
            Parameter { name: "control"; type: "JASPControl"; isPointer: true }
        }
        Method {
            name: "setOptionNameConversion"
            Parameter { name: "conv"; type: "QVariantList" }
        }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "QString" }
        }
        Method {
            name: "setShowRButton"
            Parameter { name: "showRButton"; type: "bool" }
        }
        Method {
            name: "setDeveloperMode"
            Parameter { name: "developerMode"; type: "bool" }
        }
        Method { name: "setRSyntaxText" }
        Method {
            name: "setShowAllROptions"
            Parameter { name: "showAllROptions"; type: "bool" }
        }
        Method {
            name: "sendRSyntax"
            Parameter { name: "text"; type: "QString" }
        }
        Method { name: "toggleRSyntax" }
        Method { name: "formCompletedHandler" }
        Method { name: "knownIssuesUpdated" }
        Method { name: "clearFormErrors" }
        Method { name: "clearFormWarnings" }
        Method { name: "reset" }
        Method { name: "exportResults" }
        Method {
            name: "addFormError"
            Parameter { name: "message"; type: "QString" }
        }
        Method {
            name: "addFormWarning"
            Parameter { name: "message"; type: "QString" }
        }
        Method { name: "refreshAnalysis" }
        Method { name: "runAnalysis" }
        Method { name: "initialized"; type: "bool" }
        Method { name: "generateWrapper"; type: "QString" }
        Method {
            name: "parseOptions"
            type: "QString"
            Parameter { name: "options"; type: "QString" }
            Parameter { name: "data"; type: "QString" }
        }
    }
    Component {
        file: "checkboxbase.h"
        name: "CheckBoxBase"
        accessSemantics: "reference"
        prototype: "JASPControl"
        exports: ["JASP.Controls/CheckBoxBase 1.0"]
        exportMetaObjectRevisions: [256]
        Signal { name: "clicked" }
        Method { name: "clickedSlot" }
    }
    Component {
        file: "comboboxbase.h"
        name: "ComboBoxBase"
        accessSemantics: "reference"
        prototype: "JASPListControl"
        exports: ["JASP.Controls/ComboBoxBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "currentIndex"
            type: "int"
            read: "currentIndex"
            write: "setCurrentIndex"
            notify: "currentIndexChanged"
            index: 0
        }
        Property {
            name: "currentText"
            type: "QString"
            read: "currentText"
            write: "setCurrentText"
            notify: "currentTextChanged"
            index: 1
        }
        Property {
            name: "currentValue"
            type: "QString"
            read: "currentValue"
            write: "setCurrentValue"
            notify: "currentValueChanged"
            index: 2
        }
        Property {
            name: "startValue"
            type: "QString"
            read: "startValue"
            write: "setStartValue"
            notify: "startValueChanged"
            index: 3
        }
        Property {
            name: "currentColumnType"
            type: "QString"
            read: "currentColumnType"
            notify: "currentColumnTypeChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "currentColumnTypeIcon"
            type: "QString"
            read: "currentColumnTypeIcon"
            notify: "currentColumnTypeIconChanged"
            index: 5
            isReadonly: true
        }
        Signal { name: "currentTextChanged" }
        Signal { name: "currentValueChanged" }
        Signal { name: "startValueChanged" }
        Signal { name: "currentColumnTypeChanged" }
        Signal { name: "currentColumnTypeIconChanged" }
        Signal { name: "currentIndexChanged" }
        Signal {
            name: "activated"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "termsChangedHandler" }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setCurrentValue"
            Parameter { name: "value"; type: "QString" }
        }
        Method {
            name: "setCurrentText"
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "activatedSlot"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setStartValue"
            Parameter { type: "QString" }
        }
    }
    Component {
        file: "componentslistbase.h"
        name: "ComponentsListBase"
        accessSemantics: "reference"
        prototype: "JASPListControl"
        exports: ["JASP.Controls/ComponentsListBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "addItemManually"
            type: "bool"
            read: "addItemManually"
            write: "setAddItemManually"
            notify: "addItemManuallyChanged"
            index: 0
        }
        Property {
            name: "minimumItems"
            type: "int"
            read: "minimumItems"
            write: "setMinimumItems"
            notify: "minimumItemsChanged"
            index: 1
        }
        Property {
            name: "maximumItems"
            type: "int"
            read: "maximumItems"
            write: "setMaximumItems"
            notify: "maximumItemsChanged"
            index: 2
        }
        Property {
            name: "newItemName"
            type: "QString"
            read: "newItemName"
            write: "setNewItemName"
            notify: "newItemNameChanged"
            index: 3
        }
        Property {
            name: "defaultValues"
            type: "QVariant"
            isList: true
            read: "defaultValues"
            write: "setDefaultValues"
            notify: "defaultValuesChanged"
            index: 4
        }
        Property {
            name: "duplicateWhenAdding"
            type: "bool"
            read: "duplicateWhenAdding"
            write: "setDuplicateWhenAdding"
            notify: "duplicateWhenAddingChanged"
            index: 5
        }
        Signal { name: "addItem" }
        Signal {
            name: "removeItem"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "name"; type: "QString" }
        }
        Signal { name: "newItemNameChanged" }
        Signal { name: "addItemManuallyChanged" }
        Signal { name: "minimumItemsChanged" }
        Signal { name: "maximumItemsChanged" }
        Signal { name: "defaultValuesChanged" }
        Signal { name: "duplicateWhenAddingChanged" }
        Method {
            name: "setNewItemName"
            Parameter { type: "QString" }
        }
        Method {
            name: "setAddItemManually"
            Parameter { type: "bool" }
        }
        Method {
            name: "setMinimumItems"
            Parameter { type: "int" }
        }
        Method {
            name: "setMaximumItems"
            Parameter { type: "int" }
        }
        Method {
            name: "setDefaultValues"
            Parameter { type: "QVariant"; isList: true }
        }
        Method {
            name: "setDuplicateWhenAdding"
            Parameter { type: "bool" }
        }
        Method { name: "termsChangedHandler" }
        Method { name: "addItemHandler" }
        Method {
            name: "removeItemHandler"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "nameChangedHandler"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "name"; type: "QString" }
        }
        Method { name: "resetDefaultValue" }
    }
    Component {
        file: "datasetview.h"
        name: "DataSetView"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["JASP.Controls/DataSetView 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "model"
            type: "QAbstractItemModel"
            isPointer: true
            read: "model"
            write: "setModel"
            notify: "modelChanged"
            index: 0
        }
        Property {
            name: "itemHorizontalPadding"
            type: "int"
            read: "itemHorizontalPadding"
            write: "setItemHorizontalPadding"
            notify: "itemHorizontalPaddingChanged"
            index: 1
        }
        Property {
            name: "itemVerticalPadding"
            type: "int"
            read: "itemVerticalPadding"
            write: "setItemVerticalPadding"
            notify: "itemVerticalPaddingChanged"
            index: 2
        }
        Property {
            name: "viewportX"
            type: "double"
            read: "viewportX"
            write: "setViewportX"
            notify: "viewportXChanged"
            index: 3
        }
        Property {
            name: "viewportY"
            type: "double"
            read: "viewportY"
            write: "setViewportY"
            notify: "viewportYChanged"
            index: 4
        }
        Property {
            name: "viewportW"
            type: "double"
            read: "viewportW"
            write: "setViewportW"
            notify: "viewportWChanged"
            index: 5
        }
        Property {
            name: "viewportH"
            type: "double"
            read: "viewportH"
            write: "setViewportH"
            notify: "viewportHChanged"
            index: 6
        }
        Property {
            name: "itemDelegate"
            type: "QQmlComponent"
            isPointer: true
            read: "itemDelegate"
            write: "setItemDelegate"
            notify: "itemDelegateChanged"
            index: 7
        }
        Property {
            name: "rowNumberDelegate"
            type: "QQmlComponent"
            isPointer: true
            read: "rowNumberDelegate"
            write: "setRowNumberDelegate"
            notify: "rowNumberDelegateChanged"
            index: 8
        }
        Property {
            name: "columnHeaderDelegate"
            type: "QQmlComponent"
            isPointer: true
            read: "columnHeaderDelegate"
            write: "setColumnHeaderDelegate"
            notify: "columnHeaderDelegateChanged"
            index: 9
        }
        Property {
            name: "leftTopCornerItem"
            type: "QQuickItem"
            isPointer: true
            read: "leftTopCornerItem"
            write: "setLeftTopCornerItem"
            notify: "leftTopCornerItemChanged"
            index: 10
        }
        Property {
            name: "extraColumnItem"
            type: "QQuickItem"
            isPointer: true
            read: "extraColumnItem"
            write: "setExtraColumnItem"
            notify: "extraColumnItemChanged"
            index: 11
        }
        Property {
            name: "headerHeight"
            type: "double"
            read: "headerHeight"
            notify: "headerHeightChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "rowNumberWidth"
            type: "double"
            read: "rowNumberWidth"
            write: "setRowNumberWidth"
            notify: "rowNumberWidthChanged"
            index: 13
        }
        Property {
            name: "cacheItems"
            type: "bool"
            read: "cacheItems"
            write: "setCacheItems"
            notify: "cacheItemsChanged"
            index: 14
        }
        Property {
            name: "tableViewItem"
            type: "QQuickItem"
            isPointer: true
            read: "tableViewItem"
            write: "setTableViewItem"
            index: 15
        }
        Signal { name: "modelChanged" }
        Signal { name: "itemHorizontalPaddingChanged" }
        Signal { name: "itemVerticalPaddingChanged" }
        Signal { name: "viewportXChanged" }
        Signal { name: "viewportYChanged" }
        Signal { name: "viewportWChanged" }
        Signal { name: "viewportHChanged" }
        Signal { name: "rowNumberDelegateChanged" }
        Signal { name: "columnHeaderDelegateChanged" }
        Signal { name: "itemDelegateChanged" }
        Signal { name: "leftTopCornerItemChanged" }
        Signal { name: "extraColumnItemChanged" }
        Signal { name: "itemSizeChanged" }
        Signal { name: "headerHeightChanged" }
        Signal { name: "rowNumberWidthChanged" }
        Signal { name: "cacheItemsChanged" }
        Method { name: "calculateCellSizes" }
        Method { name: "aContentSizeChanged" }
        Method { name: "viewportChanged" }
        Method {
            name: "myParentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Method { name: "reloadTextItems" }
        Method { name: "reloadRowNumbers" }
        Method { name: "reloadColumnHeaders" }
        Method {
            name: "modelDataChanged"
            Parameter { type: "QModelIndex" }
            Parameter { type: "QModelIndex" }
            Parameter { type: "int"; isList: true }
        }
        Method {
            name: "modelHeaderDataChanged"
            Parameter { type: "Qt::Orientation" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method { name: "modelAboutToBeReset" }
        Method { name: "modelWasReset" }
        Method { name: "setExtraColumnX" }
        Method {
            name: "getColumnHeader"
            type: "QQuickItem"
            isPointer: true
            Parameter { name: "col"; type: "int" }
        }
        Method {
            name: "getRowHeader"
            type: "QQuickItem"
            isPointer: true
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        file: "expanderbuttonbase.h"
        name: "ExpanderButtonBase"
        accessSemantics: "reference"
        prototype: "JASPControl"
        exports: ["JASP.Controls/ExpanderButtonBase 1.0"]
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "factorlevellistbase.h"
        name: "FactorLevelListBase"
        accessSemantics: "reference"
        prototype: "JASPListControl"
        exports: ["JASP.Controls/FactorLevelListBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "factorName"
            type: "QString"
            read: "factorName"
            write: "setFactorName"
            notify: "factorNameChanged"
            index: 0
        }
        Property {
            name: "levelName"
            type: "QString"
            read: "levelName"
            write: "setLevelName"
            notify: "levelNameChanged"
            index: 1
        }
        Property {
            name: "factorPlaceHolder"
            type: "QString"
            read: "factorPlaceHolder"
            write: "setFactorPlaceHolder"
            notify: "factorPlaceHolderChanged"
            index: 2
        }
        Property {
            name: "levelPlaceHolder"
            type: "QString"
            read: "levelPlaceHolder"
            write: "setLevelPlaceHolder"
            notify: "levelPlaceHolderChanged"
            index: 3
        }
        Property {
            name: "minFactors"
            type: "int"
            read: "minFactors"
            write: "setMinFactors"
            notify: "minFactorsChanged"
            index: 4
        }
        Property {
            name: "minLevels"
            type: "int"
            read: "minLevels"
            write: "setMinLevels"
            notify: "minLevelsChanged"
            index: 5
        }
        Property {
            name: "nbFactors"
            type: "int"
            read: "nbFactors"
            notify: "nbFactorsChanged"
            index: 6
            isReadonly: true
        }
        Signal {
            name: "itemChanged"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "name"; type: "QString" }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "index"; type: "int" }
        }
        Signal { name: "factorNameChanged" }
        Signal { name: "levelNameChanged" }
        Signal { name: "factorPlaceHolderChanged" }
        Signal { name: "levelPlaceHolderChanged" }
        Signal { name: "minFactorsChanged" }
        Signal { name: "minLevelsChanged" }
        Signal { name: "nbFactorsChanged" }
        Method { name: "termsChangedHandler" }
    }
    Component {
        file: "factorsformbase.h"
        name: "FactorsFormBase"
        accessSemantics: "reference"
        prototype: "JASPListControl"
        exports: ["JASP.Controls/FactorsFormBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "initNumberFactors"
            type: "int"
            read: "initNumberFactors"
            write: "setInitNumberFactors"
            notify: "initNumberFactorsChanged"
            index: 0
        }
        Property {
            name: "countVariables"
            type: "int"
            read: "countVariables"
            notify: "countVariablesChanged"
            index: 1
            isReadonly: true
        }
        Signal { name: "initNumberFactorsChanged" }
        Signal { name: "countVariablesChanged" }
        Method { name: "termsChangedHandler" }
        Method { name: "addFactor" }
        Method { name: "removeFactor" }
        Method {
            name: "titleChanged"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "title"; type: "QString" }
        }
        Method {
            name: "factorAdded"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QVariant" }
        }
    }
    Component {
        file: "formula.h"
        name: "Formula"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["JASP.Controls/Formula 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "userMustSpecify"
            type: "QVariant"
            read: "userMustSpecify"
            write: "setUserMustSpecify"
            notify: "userMustSpecifyChanged"
            index: 0
        }
        Property {
            name: "lhs"
            type: "QVariant"
            read: "lhs"
            write: "setLhs"
            notify: "lhsChanged"
            index: 1
        }
        Property {
            name: "rhs"
            type: "QVariant"
            read: "rhs"
            write: "setRhs"
            notify: "rhsChanged"
            index: 2
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            write: "setName"
            notify: "nameChanged"
            index: 3
        }
        Signal { name: "userMustSpecifyChanged" }
        Signal { name: "lhsChanged" }
        Signal { name: "rhsChanged" }
        Signal { name: "somethingChanged" }
        Signal { name: "nameChanged" }
        Method {
            name: "setUserMustSpecify"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setLhs"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setRhs"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setName"
            Parameter { type: "QString" }
        }
    }
    Component {
        file: "inputlistbase.h"
        name: "InputListBase"
        accessSemantics: "reference"
        prototype: "JASPListControl"
        exports: ["JASP.Controls/InputListBase 1.0"]
        exportMetaObjectRevisions: [256]
        Signal {
            name: "itemChanged"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "name"; type: "QString" }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "termsChangedHandler" }
    }
    Component {
        file: "jaspcontrol.h"
        name: "JASPControl"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["JASP.Controls/JASPControl 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "ControlType"
            values: [
                "DefaultControl",
                "Expander",
                "CheckBox",
                "Switch",
                "TextField",
                "RadioButton",
                "RadioButtonGroup",
                "VariablesListView",
                "ComboBox",
                "FactorLevelList",
                "InputListView",
                "TableView",
                "Slider",
                "TextArea",
                "Button",
                "FactorsForm",
                "ComponentsList",
                "GroupBox",
                "TabView",
                "VariablesForm"
            ]
        }
        Enum {
            name: "MyType"
            values: ["A", "B"]
        }
        Property {
            name: "controlType"
            type: "ControlType"
            read: "controlType"
            write: "setControlType"
            notify: "controlTypeChanged"
            index: 0
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            write: "setName"
            notify: "nameChanged"
            index: 1
        }
        Property {
            name: "title"
            type: "QString"
            read: "title"
            write: "setTitle"
            notify: "titleChanged"
            index: 2
        }
        Property {
            name: "info"
            type: "QString"
            read: "info"
            write: "setInfo"
            notify: "infoChanged"
            index: 3
        }
        Property {
            name: "toolTip"
            type: "QString"
            read: "toolTip"
            write: "setToolTip"
            notify: "toolTipChanged"
            index: 4
        }
        Property {
            name: "helpMD"
            type: "QString"
            read: "helpMDControl"
            notify: "helpMDChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "isBound"
            type: "bool"
            read: "isBound"
            write: "setIsBound"
            notify: "isBoundChanged"
            index: 6
        }
        Property {
            name: "indent"
            type: "bool"
            read: "indent"
            write: "setIndent"
            notify: "indentChanged"
            index: 7
        }
        Property {
            name: "isDependency"
            type: "bool"
            read: "isDependency"
            write: "setIsDependency"
            notify: "isDependencyChanged"
            index: 8
        }
        Property {
            name: "debug"
            type: "bool"
            read: "debug"
            write: "setDebug"
            notify: "debugChanged"
            index: 9
        }
        Property {
            name: "parentDebug"
            type: "bool"
            read: "parentDebug"
            notify: "parentDebugChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "focusOnTab"
            type: "bool"
            read: "focusOnTab"
            write: "setFocusOnTab"
            notify: "focusOnTabChanged"
            index: 11
        }
        Property {
            name: "hasError"
            type: "bool"
            read: "hasError"
            write: "setHasError"
            notify: "hasErrorChanged"
            index: 12
        }
        Property {
            name: "hasWarning"
            type: "bool"
            read: "hasWarning"
            write: "setHasWarning"
            notify: "hasWarningChanged"
            index: 13
        }
        Property {
            name: "initialized"
            type: "bool"
            read: "initialized"
            notify: "initializedChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "shouldShowFocus"
            type: "bool"
            read: "shouldShowFocus"
            write: "setShouldShowFocus"
            notify: "shouldShowFocusChanged"
            index: 15
        }
        Property {
            name: "shouldStealHover"
            type: "bool"
            read: "shouldStealHover"
            write: "setShouldStealHover"
            notify: "shouldStealHoverChanged"
            index: 16
        }
        Property {
            name: "childControlsArea"
            type: "QQuickItem"
            isPointer: true
            read: "childControlsArea"
            write: "setChildControlsArea"
            index: 17
        }
        Property {
            name: "parentListView"
            type: "JASPControl"
            isPointer: true
            read: "parentListViewEx"
            notify: "parentListViewChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "innerControl"
            type: "QQuickItem"
            isPointer: true
            read: "innerControl"
            write: "setInnerControl"
            notify: "innerControlChanged"
            index: 19
        }
        Property {
            name: "background"
            type: "QQuickItem"
            isPointer: true
            read: "background"
            write: "setBackground"
            notify: "backgroundChanged"
            index: 20
        }
        Property {
            name: "focusIndicator"
            type: "QQuickItem"
            isPointer: true
            read: "focusIndicator"
            write: "setFocusIndicator"
            notify: "focusIndicatorChanged"
            index: 21
        }
        Property {
            name: "dependencyMustContain"
            type: "QStringList"
            read: "dependencyMustContain"
            write: "setDependencyMustContain"
            notify: "dependencyMustContainChanged"
            index: 22
        }
        Property {
            name: "preferredHeight"
            type: "int"
            read: "preferredHeight"
            write: "setPreferredHeight"
            notify: "preferredHeightChanged"
            index: 23
        }
        Property {
            name: "preferredWidth"
            type: "int"
            read: "preferredWidth"
            write: "setPreferredWidth"
            notify: "preferredWidthChanged"
            index: 24
        }
        Property {
            name: "cursorShape"
            type: "int"
            read: "cursorShape"
            write: "setCursorShape"
            index: 25
        }
        Property {
            name: "hovered"
            type: "bool"
            read: "hovered"
            notify: "hoveredChanged"
            index: 26
            isReadonly: true
        }
        Property { name: "alignment"; type: "int"; read: "alignment"; write: "setAlignment"; index: 27 }
        Property {
            name: "focusReason"
            type: "Qt::FocusReason"
            read: "getFocusReason"
            index: 28
            isReadonly: true
        }
        Signal {
            name: "setOptionBlockSignal"
            Parameter { name: "blockSignal"; type: "bool" }
        }
        Signal { name: "nameChanged" }
        Signal { name: "isBoundChanged" }
        Signal { name: "indentChanged" }
        Signal { name: "isDependencyChanged" }
        Signal { name: "initializedChanged" }
        Signal { name: "shouldShowFocusChanged" }
        Signal { name: "shouldStealHoverChanged" }
        Signal { name: "debugChanged" }
        Signal { name: "parentDebugChanged" }
        Signal { name: "hasErrorChanged" }
        Signal { name: "hasWarningChanged" }
        Signal { name: "focusOnTabChanged" }
        Signal { name: "parentListViewChanged" }
        Signal { name: "innerControlChanged" }
        Signal { name: "backgroundChanged" }
        Signal { name: "focusIndicatorChanged" }
        Signal { name: "infoChanged" }
        Signal { name: "toolTipChanged" }
        Signal { name: "titleChanged" }
        Signal { name: "helpMDChanged" }
        Signal { name: "dependencyMustContainChanged" }
        Signal { name: "preferredHeightChanged" }
        Signal { name: "preferredWidthChanged" }
        Signal { name: "hoveredChanged" }
        Signal { name: "controlTypeChanged" }
        Signal {
            name: "boundValueChanged"
            Parameter { name: "control"; type: "JASPControl"; isPointer: true }
        }
        Signal {
            name: "requestColumnCreation"
            Parameter { name: "columnName"; type: "std::string" }
            Parameter { name: "columnType"; type: "columnType" }
        }
        Signal {
            name: "requestComputedColumnCreation"
            Parameter { name: "columnName"; type: "std::string" }
        }
        Signal {
            name: "requestComputedColumnDestruction"
            Parameter { name: "columnName"; type: "std::string" }
        }
        Method {
            name: "setControlType"
            Parameter { name: "controlType"; type: "ControlType" }
        }
        Method {
            name: "setChildControlsArea"
            Parameter { name: "childControlsArea"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setFocusOnTab"
            Parameter { name: "focus"; type: "bool" }
        }
        Method {
            name: "setHasError"
            Parameter { name: "hasError"; type: "bool" }
        }
        Method {
            name: "setHasWarning"
            Parameter { name: "hasWarning"; type: "bool" }
        }
        Method {
            name: "setDebug"
            Parameter { name: "debug"; type: "bool" }
        }
        Method {
            name: "setParentDebug"
            Parameter { name: "parentDebug"; type: "bool" }
        }
        Method {
            name: "setFocusIndicator"
            Parameter { name: "focusIndicator"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setInnerControl"
            Parameter { name: "innerControl"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setPreferredHeight"
            Parameter { name: "preferredHeight"; type: "int" }
            Parameter { name: "isBinding"; type: "bool" }
        }
        Method {
            name: "setPreferredHeight"
            Parameter { name: "preferredHeight"; type: "int" }
        }
        Method {
            name: "setPreferredWidth"
            Parameter { name: "preferredWidth"; type: "int" }
            Parameter { name: "isBinding"; type: "bool" }
        }
        Method {
            name: "setPreferredWidth"
            Parameter { name: "preferredWidth"; type: "int" }
        }
        Method {
            name: "setAlignment"
            Parameter { name: "alignment"; type: "int" }
        }
        Method {
            name: "addControlError"
            Parameter { name: "message"; type: "QString" }
        }
        Method {
            name: "addControlErrorTemporary"
            Parameter { name: "message"; type: "QString" }
        }
        Method {
            name: "addControlWarning"
            Parameter { name: "message"; type: "QString" }
        }
        Method {
            name: "addControlWarningTemporary"
            Parameter { name: "message"; type: "QString" }
        }
        Method { name: "clearControlError" }
        Method { name: "reconnectWithYourChildren" }
        Method {
            name: "parentListViewKeyChanged"
            Parameter { name: "oldName"; type: "QString" }
            Parameter { name: "newName"; type: "QString" }
        }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "setInfo"
            Parameter { type: "QString" }
        }
        Method {
            name: "setToolTip"
            Parameter { type: "QString" }
        }
        Method {
            name: "setTitle"
            Parameter { type: "QString" }
        }
        Method {
            name: "setIsBound"
            Parameter { type: "bool" }
        }
        Method {
            name: "setIndent"
            Parameter { type: "bool" }
        }
        Method {
            name: "setIsDependency"
            Parameter { type: "bool" }
        }
        Method {
            name: "setShouldShowFocus"
            Parameter { type: "bool" }
        }
        Method {
            name: "setShouldStealHover"
            Parameter { type: "bool" }
        }
        Method {
            name: "setBackground"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setDependencyMustContain"
            Parameter { type: "QStringList" }
        }
        Method { name: "_setFocusBorder" }
        Method { name: "_setShouldShowFocus" }
        Method { name: "_setBackgroundColor" }
        Method { name: "_setVisible" }
        Method { name: "_hoveredChangedSlot" }
        Method { name: "_resetBindingValue" }
        Method { name: "_setFocus" }
        Method { name: "_notifyFormOfActiveFocus" }
        Method { name: "_checkControlName" }
    }
    Component {
        file: "jaspdoublevalidator.h"
        name: "JASPDoubleValidator"
        accessSemantics: "reference"
        prototype: "QDoubleValidator"
        exports: ["JASP.Controls/JASPDoubleValidator 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "inclusive"
            type: "JASP::Inclusive"
            read: "inclusive"
            write: "setInclusive"
            notify: "inclusiveChanged"
            index: 0
        }
        Signal { name: "inclusiveChanged" }
        Method {
            name: "validationMessage"
            type: "QString"
            Parameter { name: "fieldName"; type: "QString" }
        }
    }
    Component {
        file: "jasplistcontrol.h"
        name: "JASPListControl"
        accessSemantics: "reference"
        prototype: "JASPControl"
        exports: ["JASP.Controls/JASPListControl 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "model"
            type: "ListModel"
            isPointer: true
            read: "model"
            notify: "modelChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "source"
            type: "QVariant"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 1
        }
        Property {
            name: "rSource"
            type: "QVariant"
            read: "rSource"
            write: "setRSource"
            notify: "sourceChanged"
            index: 2
        }
        Property {
            name: "values"
            type: "QVariant"
            read: "values"
            write: "setValues"
            notify: "sourceChanged"
            index: 3
        }
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "maxRows"
            type: "int"
            read: "maxRows"
            write: "setMaxRows"
            notify: "maxRowsChanged"
            index: 5
        }
        Property { name: "optionKey"; type: "QString"; read: "optionKey"; write: "setOptionKey"; index: 6 }
        Property {
            name: "addEmptyValue"
            type: "bool"
            read: "addEmptyValue"
            write: "setAddEmptyValue"
            notify: "addEmptyValueChanged"
            index: 7
        }
        Property {
            name: "placeholderText"
            type: "QString"
            read: "placeholderText"
            write: "setPlaceHolderText"
            notify: "placeHolderTextChanged"
            index: 8
        }
        Property {
            name: "labelRole"
            type: "QString"
            read: "labelRole"
            write: "setLabelRole"
            notify: "labelRoleChanged"
            index: 9
        }
        Property {
            name: "valueRole"
            type: "QString"
            read: "valueRole"
            write: "setValueRole"
            notify: "valueRoleChanged"
            index: 10
        }
        Property {
            name: "containsVariables"
            type: "bool"
            read: "containsVariables"
            notify: "containsVariablesChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "containsInteractions"
            type: "bool"
            read: "containsInteractions"
            notify: "containsInteractionsChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "maxTermsWidth"
            type: "double"
            read: "maxTermsWidth"
            notify: "maxTermsWidthChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "rowComponent"
            type: "QQmlComponent"
            isPointer: true
            read: "rowComponent"
            write: "setRowComponent"
            notify: "rowComponentChanged"
            index: 14
        }
        Signal { name: "modelChanged" }
        Signal { name: "sourceChanged" }
        Signal { name: "countChanged" }
        Signal { name: "maxRowsChanged" }
        Signal { name: "addEmptyValueChanged" }
        Signal { name: "placeHolderTextChanged" }
        Signal { name: "labelRoleChanged" }
        Signal { name: "valueRoleChanged" }
        Signal { name: "containsVariablesChanged" }
        Signal { name: "containsInteractionsChanged" }
        Signal { name: "maxTermsWidthChanged" }
        Signal { name: "rowComponentChanged" }
        Method { name: "setContainsVariables" }
        Method { name: "setContainsInteractions" }
        Method { name: "termsChangedHandler" }
        Method { name: "sourceChangedHandler" }
        Method {
            name: "setOptionKey"
            Parameter { name: "optionKey"; type: "QString" }
        }
        Method {
            name: "setSource"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setRSource"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setValues"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setAddEmptyValue"
            Parameter { type: "bool" }
        }
        Method {
            name: "setPlaceHolderText"
            Parameter { type: "QString" }
        }
        Method {
            name: "setLabelRole"
            Parameter { type: "QString" }
        }
        Method {
            name: "setValueRole"
            Parameter { type: "QString" }
        }
        Method {
            name: "setRowComponent"
            Parameter { type: "QQmlComponent"; isPointer: true }
        }
        Method {
            name: "setMaxRows"
            Parameter { type: "int" }
        }
        Method {
            name: "getSourceType"
            type: "QString"
            Parameter { name: "name"; type: "QString" }
        }
    }
    Component {
        file: "qvalidator.h"
        name: "QDoubleValidator"
        accessSemantics: "reference"
        prototype: "QValidator"
        Enum {
            name: "Notation"
            values: ["StandardNotation", "ScientificNotation"]
        }
        Property {
            name: "bottom"
            type: "double"
            read: "bottom"
            write: "setBottom"
            notify: "bottomChanged"
            index: 0
        }
        Property { name: "top"; type: "double"; read: "top"; write: "setTop"; notify: "topChanged"; index: 1 }
        Property {
            name: "decimals"
            type: "int"
            read: "decimals"
            write: "setDecimals"
            notify: "decimalsChanged"
            index: 2
        }
        Property {
            name: "notation"
            type: "Notation"
            read: "notation"
            write: "setNotation"
            notify: "notationChanged"
            index: 3
        }
        Signal {
            name: "bottomChanged"
            Parameter { name: "bottom"; type: "double" }
        }
        Signal {
            name: "topChanged"
            Parameter { name: "top"; type: "double" }
        }
        Signal {
            name: "decimalsChanged"
            Parameter { name: "decimals"; type: "int" }
        }
        Signal {
            name: "notationChanged"
            Parameter { name: "notation"; type: "QDoubleValidator::Notation" }
        }
    }
    Component {
        file: "radiobuttonbase.h"
        name: "RadioButtonBase"
        accessSemantics: "reference"
        prototype: "JASPControl"
        exports: ["JASP.Controls/RadioButtonBase 1.0"]
        exportMetaObjectRevisions: [256]
        Signal { name: "clicked" }
        Method { name: "registerWithParent" }
        Method { name: "clickHandler" }
        Method { name: "valueChangeHandler" }
    }
    Component {
        file: "radiobuttonsgroupbase.h"
        name: "RadioButtonsGroupBase"
        accessSemantics: "reference"
        prototype: "JASPControl"
        exports: ["JASP.Controls/RadioButtonsGroupBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "value"
            type: "QString"
            read: "value"
            notify: "valueChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "checkedButton"
            type: "RadioButtonBase"
            isPointer: true
            read: "checkedButton"
            notify: "valueChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "buttons"
            type: "QList<RadioButtonBase*>"
            read: "buttons"
            notify: "buttonsChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "valueChanged" }
        Signal { name: "clicked" }
        Signal { name: "buttonsChanged" }
    }
    Component {
        file: "sliderbase.h"
        name: "SliderBase"
        accessSemantics: "reference"
        prototype: "JASPControl"
        exports: ["JASP.Controls/SliderBase 1.0"]
        exportMetaObjectRevisions: [256]
        Signal { name: "moved" }
        Method { name: "movedSlot" }
        Method { name: "_movedDelayedSlot" }
    }
    Component {
        file: "tableviewbase.h"
        name: "TableViewBase"
        accessSemantics: "reference"
        prototype: "JASPListControl"
        exports: ["JASP.Controls/TableViewBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "modelType"
            type: "ModelType"
            read: "modelType"
            write: "setModelType"
            notify: "modelTypeChanged"
            index: 0
        }
        Property {
            name: "itemType"
            type: "ItemType"
            read: "itemType"
            write: "setItemType"
            notify: "itemTypeChanged"
            index: 1
        }
        Property {
            name: "itemTypePerColumn"
            type: "QVariantList"
            read: "itemTypePerColumn"
            write: "setItemTypePerColumn"
            notify: "itemTypePerColumnChanged"
            index: 2
        }
        Property {
            name: "itemTypePerRow"
            type: "QVariantList"
            read: "itemTypePerRow"
            write: "setItemTypePerRow"
            notify: "itemTypePerRowChanged"
            index: 3
        }
        Property {
            name: "defaultValue"
            type: "QVariant"
            read: "defaultValue"
            write: "setDefaultValue"
            notify: "defaultValueChanged"
            index: 4
        }
        Property {
            name: "initialValuesSource"
            type: "QVariant"
            read: "initialValuesSource"
            write: "setInitialValuesSource"
            notify: "initialValuesSourceChanged"
            index: 5
        }
        Property {
            name: "initialColumnCount"
            type: "int"
            read: "initialColumnCount"
            write: "setInitialColumnCount"
            notify: "initialColumnCountChanged"
            index: 6
        }
        Property {
            name: "initialRowCount"
            type: "int"
            read: "initialRowCount"
            write: "setInitialRowCount"
            notify: "initialRowCountChanged"
            index: 7
        }
        Property {
            name: "columnCount"
            type: "int"
            read: "columnCount"
            write: "setColumnCount"
            notify: "columnCountChanged"
            index: 8
        }
        Property {
            name: "rowCount"
            type: "int"
            read: "rowCount"
            write: "setRowCount"
            notify: "rowCountChanged"
            index: 9
        }
        Property {
            name: "variableCount"
            type: "int"
            read: "variableCount"
            notify: "variableCountChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "minRow"
            type: "int"
            read: "minRow"
            write: "setMinRow"
            notify: "minRowChanged"
            index: 11
        }
        Property {
            name: "maxRow"
            type: "int"
            read: "maxRow"
            write: "setMaxRow"
            notify: "maxRowChanged"
            index: 12
        }
        Property {
            name: "minColumn"
            type: "int"
            read: "minColumn"
            write: "setMinColumn"
            notify: "minColumnChanged"
            index: 13
        }
        Property {
            name: "maxColumn"
            type: "int"
            read: "maxColumn"
            write: "setMaxColumn"
            notify: "maxColumnChanged"
            index: 14
        }
        Property {
            name: "columnNames"
            type: "QStringList"
            read: "columnNames"
            write: "setColumnNames"
            notify: "columnNamesChanged"
            index: 15
        }
        Property {
            name: "rowNames"
            type: "QStringList"
            read: "rowNames"
            write: "setRowNames"
            notify: "rowNamesChanged"
            index: 16
        }
        Property {
            name: "updateSource"
            type: "bool"
            read: "updateSource"
            write: "setUpdateSource"
            notify: "updateSourceChanged"
            index: 17
        }
        Signal { name: "modelTypeChanged" }
        Signal { name: "itemTypeChanged" }
        Signal { name: "itemTypePerRowChanged" }
        Signal { name: "itemTypePerColumnChanged" }
        Signal { name: "defaultValueChanged" }
        Signal { name: "initialRowCountChanged" }
        Signal { name: "initialColumnCountChanged" }
        Signal { name: "initialValuesSourceChanged" }
        Signal { name: "rowCountChanged" }
        Signal { name: "columnCountChanged" }
        Signal { name: "variableCountChanged" }
        Signal { name: "minRowChanged" }
        Signal { name: "maxRowChanged" }
        Signal { name: "minColumnChanged" }
        Signal { name: "maxColumnChanged" }
        Signal { name: "columnNamesChanged" }
        Signal { name: "rowNamesChanged" }
        Signal { name: "updateSourceChanged" }
        Method { name: "refreshMe" }
        Method { name: "termsChangedHandler" }
        Method {
            name: "setModelType"
            Parameter { type: "ModelType" }
        }
        Method {
            name: "setItemType"
            Parameter { type: "ItemType" }
        }
        Method {
            name: "setDefaultValue"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setInitialRowCount"
            Parameter { type: "int" }
        }
        Method {
            name: "setInitialColumnCount"
            Parameter { type: "int" }
        }
        Method {
            name: "setInitialValuesSource"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setMinRow"
            Parameter { type: "int" }
        }
        Method {
            name: "setMaxRow"
            Parameter { type: "int" }
        }
        Method {
            name: "setMinColumn"
            Parameter { type: "int" }
        }
        Method {
            name: "setMaxColumn"
            Parameter { type: "int" }
        }
        Method {
            name: "setColumnNames"
            Parameter { type: "QStringList" }
        }
        Method {
            name: "setRowNames"
            Parameter { type: "QStringList" }
        }
        Method {
            name: "setUpdateSource"
            Parameter { type: "bool" }
        }
        Method {
            name: "setItemTypePerRow"
            Parameter { name: "list"; type: "QVariantList" }
        }
        Method {
            name: "setItemTypePerColumn"
            Parameter { name: "list"; type: "QVariantList" }
        }
        Method { name: "setInitialValuesControl" }
        Method {
            name: "addColumn"
            Parameter { name: "col"; type: "int" }
            Parameter { name: "left"; type: "bool" }
        }
        Method {
            name: "addColumn"
            Parameter { name: "col"; type: "int" }
        }
        Method { name: "addColumn" }
        Method {
            name: "removeColumn"
            Parameter { name: "col"; type: "int" }
        }
        Method { name: "addRow" }
        Method {
            name: "removeRow"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "setSize"
            Parameter { name: "rows"; type: "int" }
            Parameter { name: "columns"; type: "int" }
        }
        Method { name: "reset" }
        Method {
            name: "itemChanged"
            Parameter { name: "col"; type: "int" }
            Parameter { name: "row"; type: "int" }
            Parameter { name: "value"; type: "QString" }
            Parameter { name: "type"; type: "QString" }
        }
    }
    Component {
        file: "textareabase.h"
        name: "TextAreaBase"
        accessSemantics: "reference"
        prototype: "JASPListControl"
        exports: ["JASP.Controls/TextAreaBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "textType"
            type: "TextType"
            read: "textType"
            write: "setTextType"
            notify: "textTypeChanged"
            index: 0
        }
        Property {
            name: "hasScriptError"
            type: "bool"
            read: "hasScriptError"
            write: "setHasScriptError"
            notify: "hasScriptErrorChanged"
            index: 1
        }
        Signal { name: "textTypeChanged" }
        Signal { name: "hasScriptErrorChanged" }
        Method {
            name: "setTextType"
            Parameter { type: "JASP::TextType" }
        }
        Method {
            name: "setHasScriptError"
            Parameter { type: "bool" }
        }
        Method { name: "checkSyntaxHandler" }
        Method { name: "termsChangedHandler" }
    }
    Component {
        file: "textinputbase.h"
        name: "TextInputBase"
        accessSemantics: "reference"
        prototype: "JASPControl"
        exports: ["JASP.Controls/TextInputBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "hasScriptError"
            type: "bool"
            read: "hasScriptError"
            write: "setHasScriptError"
            notify: "hasScriptErrorChanged"
            index: 0
        }
        Property {
            name: "defaultValue"
            type: "QVariant"
            read: "defaultValue"
            write: "setDefaultValue"
            notify: "defaultValueChanged"
            index: 1
        }
        Property {
            name: "label"
            type: "QString"
            read: "label"
            write: "setLabel"
            notify: "labelChanged"
            index: 2
        }
        Property {
            name: "afterLabel"
            type: "QString"
            read: "afterLabel"
            write: "setAfterLabel"
            notify: "afterLabelChanged"
            index: 3
        }
        Property {
            name: "value"
            type: "QVariant"
            read: "value"
            write: "setValue"
            notify: "valueChanged"
            index: 4
        }
        Signal { name: "formulaCheckSucceeded" }
        Signal { name: "hasScriptErrorChanged" }
        Signal { name: "defaultValueChanged" }
        Signal { name: "valueChanged" }
        Signal { name: "labelChanged" }
        Signal { name: "afterLabelChanged" }
        Method {
            name: "setHasScriptError"
            Parameter { type: "bool" }
        }
        Method {
            name: "setDefaultValue"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setLabel"
            Parameter { type: "QString" }
        }
        Method {
            name: "setAfterLabel"
            Parameter { type: "QString" }
        }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "valueChangedSlot" }
        Method { name: "setDisplayValue" }
    }
    Component {
        file: "variablesformbase.h"
        name: "VariablesFormBase"
        accessSemantics: "reference"
        prototype: "JASPControl"
        exports: ["JASP.Controls/VariablesFormBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "availableVariablesList"
            type: "JASPControl"
            isPointer: true
            read: "availableVariablesList"
            notify: "availableVariablesListChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "allAssignedVariablesList"
            type: "QList<JASPControl*>"
            read: "allAssignedVariablesList"
            notify: "allAssignedVariablesListChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "allJASPControls"
            type: "QList<JASPControl*>"
            read: "allJASPControls"
            notify: "allJASPControlsChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "marginBetweenVariablesLists"
            type: "double"
            read: "marginBetweenVariablesLists"
            write: "setMarginBetweenVariablesLists"
            notify: "marginBetweenVariablesListsChanged"
            index: 3
        }
        Property {
            name: "minimumHeightVariablesLists"
            type: "double"
            read: "minimumHeightVariablesLists"
            write: "setMinimumHeightVariablesLists"
            notify: "minimumHeightVariablesListsChanged"
            index: 4
        }
        Signal { name: "availableVariablesListChanged" }
        Signal { name: "allAssignedVariablesListChanged" }
        Signal { name: "allJASPControlsChanged" }
        Signal { name: "marginBetweenVariablesListsChanged" }
        Signal { name: "minimumHeightVariablesListsChanged" }
        Method {
            name: "setMarginBetweenVariablesLists"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "setMinimumHeightVariablesLists"
            Parameter { name: "value"; type: "double" }
        }
        Method { name: "setControlsSizeSlot" }
        Method {
            name: "widthSetByForm"
            type: "bool"
            Parameter { name: "control"; type: "JASPControl"; isPointer: true }
        }
        Method {
            name: "heightSetByForm"
            type: "bool"
            Parameter { name: "control"; type: "JASPControl"; isPointer: true }
        }
    }
    Component {
        file: "variableslistbase.h"
        name: "VariablesListBase"
        accessSemantics: "reference"
        prototype: "JASPListControl"
        exports: ["JASP.Controls/VariablesListBase 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "listViewType"
            type: "ListViewType"
            read: "listViewType"
            write: "setListViewType"
            notify: "listViewTypeChanged"
            index: 0
        }
        Property {
            name: "columns"
            type: "int"
            read: "columns"
            write: "setColumns"
            notify: "columnsChanged"
            index: 1
        }
        Property {
            name: "allowedColumns"
            type: "QStringList"
            read: "allowedColumns"
            write: "setAllowedColumns"
            notify: "allowedColumnsChanged"
            index: 2
        }
        Property {
            name: "suggestedColumns"
            type: "QStringList"
            read: "suggestedColumns"
            write: "setSuggestedColumns"
            notify: "suggestedColumnsChanged"
            index: 3
        }
        Property {
            name: "suggestedColumnsIcons"
            type: "QStringList"
            read: "suggestedColumnsIcons"
            notify: "suggestedColumnsIconsChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "columnsTypes"
            type: "QStringList"
            read: "columnsTypes"
            notify: "columnsTypesChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "columnsNames"
            type: "QStringList"
            read: "columnsNames"
            notify: "columnsNamesChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "dropKeys"
            type: "QStringList"
            read: "dropKeys"
            write: "setDropKeys"
            notify: "dropKeysChanged"
            index: 7
        }
        Property {
            name: "interactionHighOrderCheckBox"
            type: "QString"
            read: "interactionHighOrderCheckBox"
            write: "setInteractionHighOrderCheckBox"
            notify: "interactionHighOrderCheckBoxChanged"
            index: 8
        }
        Signal { name: "listViewTypeChanged" }
        Signal { name: "columnsChanged" }
        Signal { name: "allowedColumnsChanged" }
        Signal { name: "suggestedColumnsChanged" }
        Signal { name: "suggestedColumnsIconsChanged" }
        Signal { name: "columnsTypesChanged" }
        Signal { name: "columnsNamesChanged" }
        Signal { name: "dropKeysChanged" }
        Signal { name: "interactionHighOrderCheckBoxChanged" }
        Method { name: "termsChangedHandler" }
        Method { name: "moveItemsDelayedHandler" }
        Method {
            name: "itemDoubleClickedHandler"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "itemsDroppedHandler"
            Parameter { name: "indexes"; type: "QVariant" }
            Parameter { name: "vdropList"; type: "QVariant" }
            Parameter { name: "dropItemIndex"; type: "int" }
        }
        Method {
            name: "interactionHighOrderHandler"
            Parameter { name: "checkBoxControl"; type: "JASPControl"; isPointer: true }
        }
    }
}
