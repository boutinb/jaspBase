// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

String loadQmlFileAndCheckOptions(String qmlFilePath, String options, String data);
RcppExport SEXP _qmlR_runQml(SEXP qmlFilePathSEXP, SEXP optionsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
	Rcpp::RObject rcpp_result_gen;
	Rcpp::RNGScope rcpp_rngScope_gen;
	Rcpp::traits::input_parameter< String >::type qmlFilePath(qmlFilePathSEXP);
	Rcpp::traits::input_parameter< String >::type options(optionsSEXP);
	Rcpp::traits::input_parameter< String >::type data(dataSEXP);
	rcpp_result_gen = Rcpp::wrap(loadQmlFileAndCheckOptions(qmlFilePath, options, data));
	return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_jaspResults();

static const R_CallMethodDef CallEntries[] = {
    {"_rcpp_module_boot_jaspResults", (DL_FUNC) &_rcpp_module_boot_jaspResults, 0},
	{"_qmlR_runQml", (DL_FUNC) &_qmlR_runQml, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_jaspBase(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
